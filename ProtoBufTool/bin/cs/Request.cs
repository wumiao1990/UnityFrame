// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Request.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from Request.proto</summary>
public static partial class RequestReflection {

  #region Descriptor
  /// <summary>File descriptor for Request.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static RequestReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cg1SZXF1ZXN0LnByb3RvIogBCgpSZXF1ZXN0TXNnEhAKCGZpbGVOYW1lGAEg",
          "ASgJEg8KB3N0YXJQb3MYAiABKAMSDQoFYnl0ZXMYAyABKAwSEgoKc2VuZExl",
          "bmd0aBgEIAEoBRIQCghmaWxlVHlwZRgFIAEoCRIQCghmaWxlU2l6ZRgGIAEo",
          "AxIQCghmaWxlUGF0aBgHIAEoCUIuCh9jb20ubGVub3ZvLmNsb3VkLm5ldHR5",
          "LnByb3RvYnVmQgtSZXF1ZXN0RmlsZWIGcHJvdG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::RequestMsg), global::RequestMsg.Parser, new[]{ "FileName", "StarPos", "Bytes", "SendLength", "FileType", "FileSize", "FilePath" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class RequestMsg : pb::IMessage<RequestMsg>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<RequestMsg> _parser = new pb::MessageParser<RequestMsg>(() => new RequestMsg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RequestMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RequestReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RequestMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RequestMsg(RequestMsg other) : this() {
    fileName_ = other.fileName_;
    starPos_ = other.starPos_;
    bytes_ = other.bytes_;
    sendLength_ = other.sendLength_;
    fileType_ = other.fileType_;
    fileSize_ = other.fileSize_;
    filePath_ = other.filePath_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RequestMsg Clone() {
    return new RequestMsg(this);
  }

  /// <summary>Field number for the "fileName" field.</summary>
  public const int FileNameFieldNumber = 1;
  private string fileName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string FileName {
    get { return fileName_; }
    set {
      fileName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "starPos" field.</summary>
  public const int StarPosFieldNumber = 2;
  private long starPos_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long StarPos {
    get { return starPos_; }
    set {
      starPos_ = value;
    }
  }

  /// <summary>Field number for the "bytes" field.</summary>
  public const int BytesFieldNumber = 3;
  private pb::ByteString bytes_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Bytes {
    get { return bytes_; }
    set {
      bytes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "sendLength" field.</summary>
  public const int SendLengthFieldNumber = 4;
  private int sendLength_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SendLength {
    get { return sendLength_; }
    set {
      sendLength_ = value;
    }
  }

  /// <summary>Field number for the "fileType" field.</summary>
  public const int FileTypeFieldNumber = 5;
  private string fileType_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string FileType {
    get { return fileType_; }
    set {
      fileType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "fileSize" field.</summary>
  public const int FileSizeFieldNumber = 6;
  private long fileSize_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long FileSize {
    get { return fileSize_; }
    set {
      fileSize_ = value;
    }
  }

  /// <summary>Field number for the "filePath" field.</summary>
  public const int FilePathFieldNumber = 7;
  private string filePath_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string FilePath {
    get { return filePath_; }
    set {
      filePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RequestMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RequestMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (FileName != other.FileName) return false;
    if (StarPos != other.StarPos) return false;
    if (Bytes != other.Bytes) return false;
    if (SendLength != other.SendLength) return false;
    if (FileType != other.FileType) return false;
    if (FileSize != other.FileSize) return false;
    if (FilePath != other.FilePath) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (FileName.Length != 0) hash ^= FileName.GetHashCode();
    if (StarPos != 0L) hash ^= StarPos.GetHashCode();
    if (Bytes.Length != 0) hash ^= Bytes.GetHashCode();
    if (SendLength != 0) hash ^= SendLength.GetHashCode();
    if (FileType.Length != 0) hash ^= FileType.GetHashCode();
    if (FileSize != 0L) hash ^= FileSize.GetHashCode();
    if (FilePath.Length != 0) hash ^= FilePath.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (FileName.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(FileName);
    }
    if (StarPos != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(StarPos);
    }
    if (Bytes.Length != 0) {
      output.WriteRawTag(26);
      output.WriteBytes(Bytes);
    }
    if (SendLength != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(SendLength);
    }
    if (FileType.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(FileType);
    }
    if (FileSize != 0L) {
      output.WriteRawTag(48);
      output.WriteInt64(FileSize);
    }
    if (FilePath.Length != 0) {
      output.WriteRawTag(58);
      output.WriteString(FilePath);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (FileName.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(FileName);
    }
    if (StarPos != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(StarPos);
    }
    if (Bytes.Length != 0) {
      output.WriteRawTag(26);
      output.WriteBytes(Bytes);
    }
    if (SendLength != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(SendLength);
    }
    if (FileType.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(FileType);
    }
    if (FileSize != 0L) {
      output.WriteRawTag(48);
      output.WriteInt64(FileSize);
    }
    if (FilePath.Length != 0) {
      output.WriteRawTag(58);
      output.WriteString(FilePath);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (FileName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(FileName);
    }
    if (StarPos != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(StarPos);
    }
    if (Bytes.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Bytes);
    }
    if (SendLength != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SendLength);
    }
    if (FileType.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(FileType);
    }
    if (FileSize != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(FileSize);
    }
    if (FilePath.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(FilePath);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RequestMsg other) {
    if (other == null) {
      return;
    }
    if (other.FileName.Length != 0) {
      FileName = other.FileName;
    }
    if (other.StarPos != 0L) {
      StarPos = other.StarPos;
    }
    if (other.Bytes.Length != 0) {
      Bytes = other.Bytes;
    }
    if (other.SendLength != 0) {
      SendLength = other.SendLength;
    }
    if (other.FileType.Length != 0) {
      FileType = other.FileType;
    }
    if (other.FileSize != 0L) {
      FileSize = other.FileSize;
    }
    if (other.FilePath.Length != 0) {
      FilePath = other.FilePath;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          FileName = input.ReadString();
          break;
        }
        case 16: {
          StarPos = input.ReadInt64();
          break;
        }
        case 26: {
          Bytes = input.ReadBytes();
          break;
        }
        case 32: {
          SendLength = input.ReadInt32();
          break;
        }
        case 42: {
          FileType = input.ReadString();
          break;
        }
        case 48: {
          FileSize = input.ReadInt64();
          break;
        }
        case 58: {
          FilePath = input.ReadString();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          FileName = input.ReadString();
          break;
        }
        case 16: {
          StarPos = input.ReadInt64();
          break;
        }
        case 26: {
          Bytes = input.ReadBytes();
          break;
        }
        case 32: {
          SendLength = input.ReadInt32();
          break;
        }
        case 42: {
          FileType = input.ReadString();
          break;
        }
        case 48: {
          FileSize = input.ReadInt64();
          break;
        }
        case 58: {
          FilePath = input.ReadString();
          break;
        }
      }
    }
  }
  #endif

}

#endregion


#endregion Designer generated code
