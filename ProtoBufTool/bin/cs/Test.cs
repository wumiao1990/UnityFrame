// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: test.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from test.proto</summary>
public static partial class TestReflection {

  #region Descriptor
  /// <summary>File descriptor for test.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static TestReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cgp0ZXN0LnByb3RvIoMBCghUZXN0RGF0YRIKCgJJRBgBIAIoBRIQCghVc2Vy",
          "TmFtZRgCIAIoCRIRCglVc2VyTmFtZTIYAyACKAkSEQoJVXNlck5hbWUzGAQg",
          "AigJEhEKCVVzZXJOYW1lNBgFIAIoCRIRCglVc2VyTmFtZTUYBiACKAkSDQoF",
          "dmFsdWUYByACKAIiKAoNVGVzdERhdGFUYWJsZRIXCgRkYXRhGAEgAygLMgku",
          "VGVzdERhdGE="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::TestData), global::TestData.Parser, new[]{ "ID", "UserName", "UserName2", "UserName3", "UserName4", "UserName5", "Value" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TestDataTable), global::TestDataTable.Parser, new[]{ "Data" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class TestData : pb::IMessage<TestData>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<TestData> _parser = new pb::MessageParser<TestData>(() => new TestData());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TestData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TestReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TestData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TestData(TestData other) : this() {
    _hasBits0 = other._hasBits0;
    iD_ = other.iD_;
    userName_ = other.userName_;
    userName2_ = other.userName2_;
    userName3_ = other.userName3_;
    userName4_ = other.userName4_;
    userName5_ = other.userName5_;
    value_ = other.value_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TestData Clone() {
    return new TestData(this);
  }

  /// <summary>Field number for the "ID" field.</summary>
  public const int IDFieldNumber = 1;
  private readonly static int IDDefaultValue = 0;

  private int iD_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ID {
    get { if ((_hasBits0 & 1) != 0) { return iD_; } else { return IDDefaultValue; } }
    set {
      _hasBits0 |= 1;
      iD_ = value;
    }
  }
  /// <summary>Gets whether the "ID" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasID {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "ID" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearID() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "UserName" field.</summary>
  public const int UserNameFieldNumber = 2;
  private readonly static string UserNameDefaultValue = "";

  private string userName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string UserName {
    get { return userName_ ?? UserNameDefaultValue; }
    set {
      userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "UserName" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasUserName {
    get { return userName_ != null; }
  }
  /// <summary>Clears the value of the "UserName" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearUserName() {
    userName_ = null;
  }

  /// <summary>Field number for the "UserName2" field.</summary>
  public const int UserName2FieldNumber = 3;
  private readonly static string UserName2DefaultValue = "";

  private string userName2_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string UserName2 {
    get { return userName2_ ?? UserName2DefaultValue; }
    set {
      userName2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "UserName2" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasUserName2 {
    get { return userName2_ != null; }
  }
  /// <summary>Clears the value of the "UserName2" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearUserName2() {
    userName2_ = null;
  }

  /// <summary>Field number for the "UserName3" field.</summary>
  public const int UserName3FieldNumber = 4;
  private readonly static string UserName3DefaultValue = "";

  private string userName3_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string UserName3 {
    get { return userName3_ ?? UserName3DefaultValue; }
    set {
      userName3_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "UserName3" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasUserName3 {
    get { return userName3_ != null; }
  }
  /// <summary>Clears the value of the "UserName3" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearUserName3() {
    userName3_ = null;
  }

  /// <summary>Field number for the "UserName4" field.</summary>
  public const int UserName4FieldNumber = 5;
  private readonly static string UserName4DefaultValue = "";

  private string userName4_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string UserName4 {
    get { return userName4_ ?? UserName4DefaultValue; }
    set {
      userName4_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "UserName4" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasUserName4 {
    get { return userName4_ != null; }
  }
  /// <summary>Clears the value of the "UserName4" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearUserName4() {
    userName4_ = null;
  }

  /// <summary>Field number for the "UserName5" field.</summary>
  public const int UserName5FieldNumber = 6;
  private readonly static string UserName5DefaultValue = "";

  private string userName5_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string UserName5 {
    get { return userName5_ ?? UserName5DefaultValue; }
    set {
      userName5_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "UserName5" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasUserName5 {
    get { return userName5_ != null; }
  }
  /// <summary>Clears the value of the "UserName5" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearUserName5() {
    userName5_ = null;
  }

  /// <summary>Field number for the "value" field.</summary>
  public const int ValueFieldNumber = 7;
  private readonly static float ValueDefaultValue = 0F;

  private float value_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Value {
    get { if ((_hasBits0 & 2) != 0) { return value_; } else { return ValueDefaultValue; } }
    set {
      _hasBits0 |= 2;
      value_ = value;
    }
  }
  /// <summary>Gets whether the "value" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasValue {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "value" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearValue() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TestData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TestData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ID != other.ID) return false;
    if (UserName != other.UserName) return false;
    if (UserName2 != other.UserName2) return false;
    if (UserName3 != other.UserName3) return false;
    if (UserName4 != other.UserName4) return false;
    if (UserName5 != other.UserName5) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Value, other.Value)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasID) hash ^= ID.GetHashCode();
    if (HasUserName) hash ^= UserName.GetHashCode();
    if (HasUserName2) hash ^= UserName2.GetHashCode();
    if (HasUserName3) hash ^= UserName3.GetHashCode();
    if (HasUserName4) hash ^= UserName4.GetHashCode();
    if (HasUserName5) hash ^= UserName5.GetHashCode();
    if (HasValue) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Value);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasID) {
      output.WriteRawTag(8);
      output.WriteInt32(ID);
    }
    if (HasUserName) {
      output.WriteRawTag(18);
      output.WriteString(UserName);
    }
    if (HasUserName2) {
      output.WriteRawTag(26);
      output.WriteString(UserName2);
    }
    if (HasUserName3) {
      output.WriteRawTag(34);
      output.WriteString(UserName3);
    }
    if (HasUserName4) {
      output.WriteRawTag(42);
      output.WriteString(UserName4);
    }
    if (HasUserName5) {
      output.WriteRawTag(50);
      output.WriteString(UserName5);
    }
    if (HasValue) {
      output.WriteRawTag(61);
      output.WriteFloat(Value);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasID) {
      output.WriteRawTag(8);
      output.WriteInt32(ID);
    }
    if (HasUserName) {
      output.WriteRawTag(18);
      output.WriteString(UserName);
    }
    if (HasUserName2) {
      output.WriteRawTag(26);
      output.WriteString(UserName2);
    }
    if (HasUserName3) {
      output.WriteRawTag(34);
      output.WriteString(UserName3);
    }
    if (HasUserName4) {
      output.WriteRawTag(42);
      output.WriteString(UserName4);
    }
    if (HasUserName5) {
      output.WriteRawTag(50);
      output.WriteString(UserName5);
    }
    if (HasValue) {
      output.WriteRawTag(61);
      output.WriteFloat(Value);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasID) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
    }
    if (HasUserName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
    }
    if (HasUserName2) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName2);
    }
    if (HasUserName3) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName3);
    }
    if (HasUserName4) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName4);
    }
    if (HasUserName5) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName5);
    }
    if (HasValue) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TestData other) {
    if (other == null) {
      return;
    }
    if (other.HasID) {
      ID = other.ID;
    }
    if (other.HasUserName) {
      UserName = other.UserName;
    }
    if (other.HasUserName2) {
      UserName2 = other.UserName2;
    }
    if (other.HasUserName3) {
      UserName3 = other.UserName3;
    }
    if (other.HasUserName4) {
      UserName4 = other.UserName4;
    }
    if (other.HasUserName5) {
      UserName5 = other.UserName5;
    }
    if (other.HasValue) {
      Value = other.Value;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ID = input.ReadInt32();
          break;
        }
        case 18: {
          UserName = input.ReadString();
          break;
        }
        case 26: {
          UserName2 = input.ReadString();
          break;
        }
        case 34: {
          UserName3 = input.ReadString();
          break;
        }
        case 42: {
          UserName4 = input.ReadString();
          break;
        }
        case 50: {
          UserName5 = input.ReadString();
          break;
        }
        case 61: {
          Value = input.ReadFloat();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          ID = input.ReadInt32();
          break;
        }
        case 18: {
          UserName = input.ReadString();
          break;
        }
        case 26: {
          UserName2 = input.ReadString();
          break;
        }
        case 34: {
          UserName3 = input.ReadString();
          break;
        }
        case 42: {
          UserName4 = input.ReadString();
          break;
        }
        case 50: {
          UserName5 = input.ReadString();
          break;
        }
        case 61: {
          Value = input.ReadFloat();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class TestDataTable : pb::IMessage<TestDataTable>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<TestDataTable> _parser = new pb::MessageParser<TestDataTable>(() => new TestDataTable());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TestDataTable> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TestReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TestDataTable() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TestDataTable(TestDataTable other) : this() {
    data_ = other.data_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TestDataTable Clone() {
    return new TestDataTable(this);
  }

  /// <summary>Field number for the "data" field.</summary>
  public const int DataFieldNumber = 1;
  private static readonly pb::FieldCodec<global::TestData> _repeated_data_codec
      = pb::FieldCodec.ForMessage(10, global::TestData.Parser);
  private readonly pbc::RepeatedField<global::TestData> data_ = new pbc::RepeatedField<global::TestData>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::TestData> Data {
    get { return data_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TestDataTable);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TestDataTable other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!data_.Equals(other.data_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= data_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    data_.WriteTo(output, _repeated_data_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    data_.WriteTo(ref output, _repeated_data_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += data_.CalculateSize(_repeated_data_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TestDataTable other) {
    if (other == null) {
      return;
    }
    data_.Add(other.data_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          data_.AddEntriesFrom(input, _repeated_data_codec);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          data_.AddEntriesFrom(ref input, _repeated_data_codec);
          break;
        }
      }
    }
  }
  #endif

}

#endregion


#endregion Designer generated code
